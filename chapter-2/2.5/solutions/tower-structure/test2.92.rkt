#lang sicp
(#%require "polynomial.rkt")
(#%require "operators.rkt")
(#%require "arithmetic.rkt")

(install-arithmetic)
(install-polynomial-package)
(install-coercion)

(define poly-1 (make-polynomial 'x '(sparse (term 0 2))))
(define poly-2 (make-polynomial 'x '(sparse (term 1 1) (term 0 2))))
(define poly-3 (make-polynomial 'x '(sparse (term 0 3))))
(define poly-4 (make-polynomial 'x '(sparse (term 6 2) (term 5 1) (term 4 2) (term 3 3))))
(define poly-5 (make-polynomial 'y '(sparse (term 1 1) (term 0 2))))
(define poly-6 (make-polynomial 'y '(sparse (term 0 5))))
(define poly-7 (mul poly-2 poly-5))
(define poly-8 (mul poly-4 poly-7))
(define poly-9 (mul poly-7 poly-8))
(define poly-10 (make-polynomial 'x '(sparse (term 6 8) (term 5 7) (term 4 6) (term 3 3))))
(define poly-11 (make-polynomial 'y '(sparse (term 1 3) (term 0 2))))
(define poly-12 (mul poly-10 poly-11))
(define poly-13 (make-polynomial 'y '(sparse (term 9 8) (term 5 7) (term 4 6) (term 3 3))))
(define poly-14 (make-polynomial 'x '(sparse (term 0 (polynomial y sparse (term 6 1))))))

(mod-print poly-7)
(mod-print poly-8)
(mod-print poly-9)
(mod-print poly-10)
(mod-print (add poly-7 poly-10))
(mod-print (mul poly-11 (mul poly-12 poly-13)))
