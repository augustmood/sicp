#lang sicp
(#%require "interface.rkt")
(#%require "integer.rkt")
(#%require "rational-number.rkt")
(#%require "real.rkt")
(#%require "complex-number.rkt")
(#%require "polynomial.rkt")
(#%require "operators.rkt")
(#%require "arithmetic.rkt")
(#%require "tower-system.rkt")

(install-arithmetic)
(install-polynomial-package)
(install-coercion)

(define poly-1 (make-polynomial 'x '(sparse (term 0 2))))
(define poly-2 (make-polynomial 'x '(sparse (term 1 1) (term 0 2))))
(define poly-3 (make-polynomial 'x '(sparse (term 0 3))))
(define poly-4 (make-polynomial 'x '(sparse (term 6 2) (term 5 1) (term 4 2) (term 3 3))))
(define poly-5 (make-polynomial 'y '(sparse (term 1 1) (term 0 2))))
(define poly-6 (make-polynomial 'y '(sparse (term 0 5))))
; (define complex-1 (make-complex-from-real-imag 5 1))
; ((get-coercion 'polynomial 'complex) poly-1)
; (mul ((get-coercion 'polynomial 'complex) poly-2) ((get-coercion 'polynomial 'complex) poly-2))

; poly-1
; poly-2
; (project poly-2)
; (drop poly-2)
; (mul poly-2 poly-3)
; (mul poly-2 (raise complex-1))
; (raise (raise (raise (make-rational 6 2))))
; (project (make-complex-from-real-imag 10.0 0))
; (general-eq? (make-complex-from-real-imag 10.0 0) 
;              (raise (project (make-complex-from-real-imag 10.0 0))))
; (raise (project (make-complex-from-real-imag 10.0 0)))

; (add poly-2 poly-6)
; (add poly-2 poly-5)

(define poly-7 (mul poly-2 poly-5))
(define poly-8 (mul poly-4 poly-7))
(define poly-9 (mul poly-7 poly-8))
(define poly-10 (make-polynomial 'x '(sparse (term 6 8) (term 5 7) (term 4 6) (term 3 3))))
(define poly-11 (make-polynomial 'y '(sparse (term 1 3) (term 0 2))))
(define poly-12 (mul poly-10 poly-11))

; (mod-print poly-7)
; (mod-print poly-8)
; (mod-print poly-9)
(mod-print poly-7)
(mod-print poly-10)
(mod-print (add poly-7 poly-10))