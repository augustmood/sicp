#lang sicp
(#%require "interface.rkt")
(#%require "integer.rkt")
(#%require "rational-number.rkt")
(#%require "real.rkt")
(#%require "complex-number.rkt")
(#%require "tower-system.rkt")
(#%provide (all-defined))

(define (install-arithmetic)
  (install-integer-package)
  (install-rational-package)
  (install-real-package)
  (install-complex-package)  
  (define (integer->rational arg)
    (make-rational arg 1))
  
  (define (rational->real arg)
    (let ((contents (contents arg)))
      (exact->inexact (/ (car contents) (cdr contents)))))
  
  (define (real->complex arg)
    (make-complex-from-real-imag (exact->inexact arg) 0))
  
  (put-coercion 'integer 'rational integer->rational)
  (put-coercion 'rational 'real rational->real)
  (put-coercion 'real 'complex real->complex)
  )

(define (add x y)
  (apply-generic 'add x y))
(define (sub x y)
  (apply-generic 'sub x y))
(define (mul x y)
  (apply-generic 'mul x y))
(define (div x y)
  (apply-generic 'div x y))
(define (equ? x y)
  (apply-generic 'equ? x y))
(define (=zero? x)
  (apply-generic '=zero? x))

(define (make-integer x)
  ((get 'make 'integer) x))
(define (make-rational n d)
  ((get 'make 'rational) n d))
(define (make-real x)
  ((get 'make 'real) x))
(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))