#lang sicp
(#%require "interface.rkt")
(#%require "tower-system.rkt")
(#%require "operators.rkt")
(#%provide (all-defined))

(define (square n)
  (mul n n))

(define (install-rectangular-package)
  ;; internal procedures
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y)
    (let ((complex-level (tower-level 'complex tower))
          (x-level (tower-level (type-tag x) tower))
          (y-level (tower-level (type-tag y) tower)))
      (cons (if (< x-level complex-level) (drop x) x)
            (if (< y-level complex-level)
                (let ((simplified-y (drop y)))
                  (if (pair? simplified-y)
                      (list simplified-y)
                      simplified-y))
                y))))
  (define (magnitude z)
    (sqrt (add (square (real-part z))
               (square (imag-part z)))))
  (define (angle z)
    (atan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a) 
    (cons (drop (mul r (cos a))) 
          (let ((simplified-a (mul r (sin a)))) 
            (if (pair? simplified-a)
                (list simplified-a)
                simplified-a))))
  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular 
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular 
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (install-polar-package)
  ;; internal procedures
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a) 
    (cons (drop r) 
          (let ((simplified-a (drop a)))
            (if (pair? simplified-a)
                (list simplified-a)
                simplified-a))))
  (define (real-part z)
    (mul (magnitude z) (cos (angle z))))
  (define (imag-part z)
    (mul (magnitude z) (sin (angle z))))
  (define (make-from-real-imag x y)
    (cons (drop (sqrt (add (square x) (square y))))
          (let ((simplified-y (drop (atan y x))))
            (if (pair? simplified-y)
                (list simplified-y)
                simplified-y))))
  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
