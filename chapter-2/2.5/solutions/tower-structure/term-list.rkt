#lang sicp
(#%require "interface.rkt")
(#%require "operators.rkt")
(#%require "tower-system.rkt")
(#%provide (all-defined))

(define (install-term-package)
  (define (make-term order coeff) (list order coeff))
  (define (tag x) (attach-tag 'term x))
  (define (tag-exist? term) (and (= (length term) 3) (eq? (car term) 'term)))
  ; (define (order term) (if (tag-exist? term) (cadr term) (car term)))
  ; (define (coeff term) (if (tag-exist? term) (caddr term) (cadr term)))
  (define (order term) (car term))
  (define (coeff term) (cadr term))
  (put 'make-term 'term (lambda (order coeff) (tag (make-term order coeff))))
  (put 'order '(term) order)
  (put 'coeff '(term) coeff))

(define (install-sparse-package)
  (install-term-package)
  (define (order term) (apply-generic 'order term))
  (define (coeff term) (apply-generic 'coeff term))
  (define (make-term order coeff) ((get 'make-term 'term) order coeff))

  (define (adjoin-term term term-list)
    (let ((revised-term (make-term (car term) (cadr term))))
      (if (=zero? (coeff revised-term))
          term-list
          (cons revised-term term-list))))
  (define (first-term term-list)
    (make-term (order (car term-list)) (coeff (car term-list))))
  (define (rest-terms term-list) (cdr term-list))
  (define (tag x) (attach-tag 'sparse x))
  (put 'adjoin-term '(term sparse)
       (lambda (term term-list) (tag (adjoin-term term term-list))))
  (put 'first-term '(sparse) (lambda (term-list) (first-term term-list))) ;; ?
  (put 'rest-terms '(sparse) (lambda (term-list) (tag (rest-terms term-list))))
  'done)

(define (install-dense-package)
  (install-term-package)
  (define (order term) (apply-generic 'order term))
  (define (coeff term) (apply-generic 'coeff term))
  (define (make-term order coeff) ((get 'make-term 'term) order coeff))

  (define (iter n result)
    (if (= n 1)
        result
        (iter (- n 1) (cons 0 result))))
  (define (adjoin-term term term-list)
    (let ((revised-term (make-term (car term) (cadr term))))
      (if (=zero? (coeff revised-term))
          term-list
          (if (null? term-list)
              (cons (coeff revised-term) (iter (add 1 (order revised-term)) term-list))
              (let ((diff (- (order revised-term) (order (first-term term-list)))))
                (cons (coeff revised-term) (iter diff term-list)))))))
  
  (define (first-term term-list)
    (make-term (- (length term-list) 1) (car term-list)))
  (define (rest-terms term-list) (cdr term-list))
  
  (define (tag x) (attach-tag 'dense x))
  (define (term-tag x) (attach-tag 'term x))
  (put 'adjoin-term '(term dense)
       (lambda (term term-list) (tag (adjoin-term term term-list))))
  (put 'first-term '(dense) (lambda (term-list) (first-term term-list)))
  (put 'rest-terms '(dense) (lambda (term-list) (tag (rest-terms term-list))))
  'done)