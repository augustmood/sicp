#lang sicp
(#%require "arithmetic.rkt")
(install-arithmetic-system)

(define sn-1 (make-scheme-number 0.333333))
(define sn-2 (make-scheme-number 0.666666))
(define sn-3 (make-scheme-number 0))
(define rat-1 (make-rational 1 3))
(define rat-2 (make-rational 2 3))
(define rat-3 (make-rational 0 3))
(define complex-1 (make-complex-from-mag-ang 0 0))
(define complex-2 (make-complex-from-real-imag 3 4))
(define complex-3 (make-complex-from-mag-ang 0 (atan (/ 4 3))))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (tets-=zero? input expected)
  (let ((results (map =zero? input)))
    (define (boolean->string boo) (if boo "#t" "#f"))
    (define (rec sets expected)
      (if (= (length sets) (length expected))
          (if (null? sets) 
              "test passed!"
              (if (eq? (car sets) (car expected))
                  (rec (cdr sets) (cdr expected))
                  (string-append "test failed: Actual value " (boolean->string (car sets))
                                 " differs from " (boolean->string (car expected)) 
                                 ", the expected value.")))
          (string-append "test failed: Length of results list " (number->string (length sets))
                         " differs from " (number->string (length expected))
                         ", the length of expected list.") ))
    (rec results expected)))

(define input-1 (list sn-1 sn-2 sn-3 rat-1 rat-2 rat-3 complex-1 complex-2 complex-3))
(define expectation-1 (list #f #f #t #f #f #t #t #f #t))
(define expectation-2 (list #f #f #t #f #f #t #t #t #t))
(define expectation-3 (list #f #f #t #f #f #t #t #t))
(tets-=zero? input-1 expectation-1)
(tets-=zero? input-1 expectation-2)
(tets-=zero? input-1 expectation-3)